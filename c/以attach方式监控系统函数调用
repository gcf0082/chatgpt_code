#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/ptrace.h>
#include <sys/reg.h>
#include <sys/wait.h>
#include <sys/user.h>
#include <syscall.h>
#include <fcntl.h>

int main(int argc, char **argv) {
    pid_t pid;
    long orig_rax, rax;
    int status;
    struct user_regs_struct regs;

    if (argc < 3) {
        fprintf(stderr, "Usage: %s <pid> <log_file>\n", argv[0]);
        return 1;
    }

    pid = atoi(argv[1]);
    if(ptrace(PTRACE_ATTACH, pid, NULL, NULL) == -1) {
        perror("ptrace");
        return 1;
    }

    wait(&status);

    FILE *log_file = fopen(argv[2], "a");
    if (log_file == NULL) {
        perror("fopen");
        return 1;
    }

    while(WIFSTOPPED(status)) {
        if(ptrace(PTRACE_GETREGS, pid, NULL, &regs) == -1) {
            perror("ptrace");
            return 1;
        }

        orig_rax = regs.orig_rax;

        if(orig_rax == SYS_open) {
            char *filename = (char*) malloc(PATH_MAX * sizeof(char));
            if (filename == NULL) {
                perror("malloc");
                return 1;
            }
            long addr = regs.rdi;
            int i = 0;
            while(1) {
                long val = ptrace(PTRACE_PEEKDATA, pid, addr+i, NULL);
                if (val == -1) {
                    perror("ptrace");
                    return 1;
                }
                memcpy(filename+i, &val, sizeof(long));
                if (memchr(&val, 0, sizeof(long))) {
                    break;
                }
                i += sizeof(long);
            }
            filename[i] = '\0';
            fprintf(log_file, "open() called with file: %s, flags: %d, mode: %d\n",
                    filename, (int)regs.rsi, (int)regs.rdx);
            free(filename);
        }

        if(ptrace(PTRACE_SYSCALL, pid, NULL, NULL) == -1) {
            perror("ptrace");
            return 1;
        }

        wait(&status);
    }

    fclose(log_file);

    if(ptrace(PTRACE_DETACH, pid, NULL, NULL) == -1) {
        perror("ptrace");
        return 1;
    }

    return 0;
}
