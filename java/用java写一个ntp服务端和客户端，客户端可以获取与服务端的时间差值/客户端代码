import java.net.*;
import java.io.*;
import java.util.*;

public class NTPClient {
    private static final long EPOCH_DIFF = 2208988800L;

    public static void main(String[] args) {
        DatagramSocket socket = null;

        try {
            InetAddress address = InetAddress.getByName("localhost");
            socket = new DatagramSocket();

            byte[] buffer = new byte[48];
            buffer[0] = (byte) 0xE3;
            for (int i = 1; i < buffer.length; i++) {
                buffer[i] = 0;
            }

            DatagramPacket request = new DatagramPacket(buffer, buffer.length, address, 123);
            socket.send(request);

            DatagramPacket response = new DatagramPacket(buffer, buffer.length);
            socket.receive(response);

            long receiveTime = System.currentTimeMillis() / 1000 + EPOCH_DIFF;
            long originateTime = (((buffer[24] & 0xFF) << 24) | ((buffer[25] & 0xFF) << 16) | ((buffer[26] & 0xFF) << 8)| ((buffer[27] & 0xFF) << 0)) - EPOCH_DIFF;
long receiveTimestamp = (((buffer[32] & 0xFF) << 24) | ((buffer[33] & 0xFF) << 16) | ((buffer[34] & 0xFF) << 8) | ((buffer[35] & 0xFF) << 0)) - EPOCH_DIFF;
long transmitTimestamp = (((buffer[40] & 0xFF) << 24) | ((buffer[41] & 0xFF) << 16) | ((buffer[42] & 0xFF) << 8) | ((buffer[43] & 0xFF) << 0)) - EPOCH_DIFF;
        long roundTripTime = (receiveTime - originateTime) - (transmitTimestamp - receiveTimestamp);
        long offset = ((receiveTimestamp - originateTime) + (transmitTimestamp - receiveTime)) / 2;

        System.out.println("Round-trip time: " + roundTripTime + "ms");
        System.out.println("Offset: " + offset + "ms");
    } catch (SocketException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (socket != null) {
            socket.close();
        }
    }
}
}
            
